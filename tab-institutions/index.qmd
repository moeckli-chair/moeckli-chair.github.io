---
title: "Instruments"
---

```{r setup-institutions}
library(tidyverse)
library(reactable)
library(here)

def_table <- read_csv(here("data/summaryDefinition.csv"))
long <- read_csv(here("data/long.csv"))

id_vec <- long %>% 
  filter(is.na(filterCountry)) %>% 
  distinct(ID) %>% 
  pull(ID)

df <- long %>%
  filter(!ID %in% id_vec) %>% 
  select(Country,Instrument,Type,Question,Answer,Sources,Comment)

df <- df %>%
  mutate(
    Information = case_when(
      !is.na(Sources) & !is.na(Comment) ~ paste0(
        "<strong>Source:</strong> ", Sources,
        "<br><strong>Comment:</strong> ", Comment
      ),
      !is.na(Sources) & is.na(Comment)  ~ paste0(
        "<strong>Source:</strong> ", Sources
      ),
      is.na(Sources) & !is.na(Comment)  ~ paste0(
        "<strong>Comment:</strong> ", Comment
      ),
      TRUE                              ~ NA_character_
    )
  ) %>%
  relocate(Information, .after = Answer) %>%
  select(-Sources, -Comment) %>% 
  drop_na(Answer)

```

This setion of the website provides access to key data on the legal regulation of the various types of direct-democratic instruments that exist at the national level across the 46 member states of the Council of Europe. 

::: {.callout-warning}
### Missing cases
Six out of the 46 Council of Europe states have been classified as not providing for any instrument of direct democracy at the national level. These states are not included in the database. They are: Belgium, Bosnia and Herzegovina, Cyprus, Czech Republic, Monaco, and Norway.

 
:::

## Explore data

We distinguish between seven types of instruments of direct democracy. Our basic unit of analysis is the Country * Instrument combination. For each Country * Instrument combination, we have collected information on between 42 and 72 items, depending on the instrument. For further information on the items and definitions see the Codebook section. This produces a stacked dataset where a country row is repeated for each instrument provided for. Below, you can explore the data by instrument and by country. 

### By Instrument

::: {.callout-note collapse="true"}
### View data

```{r reactable-institution}
# First, create the grouped data for the main table
grouped_data <- df %>%
  select(Instrument, Country, Type) %>%
  unique()

# Create the reactable with nested tables
reactable(
  grouped_data,
  groupBy = c("Instrument", "Country"),
  columns = list(
    Country = colDef(width = 150),
    Instrument = colDef(width = 150),
    Type = colDef(width = 150)
  ),
  details = function(index) {
    # Get the detailed data for the selected row
    detail_data <- df %>%
      filter(
        Instrument == grouped_data$Instrument[index] &
        Country == grouped_data$Country[index] &
          Type == grouped_data$Type[index]
      ) %>%
      select(Question, Answer, Information)
    
    # Create the nested table
    htmltools::div(
      style = "padding: 1rem",
      reactable(
        detail_data,
        columns = list(
          Question = colDef(width = 200),
          Answer = colDef(width = 200),
          #Information = colDef(width = 300),
          Information = colDef(html = TRUE)
        ),
        outlined = TRUE,
        striped = TRUE,
        highlight = TRUE,
        defaultPageSize = 5
      )
    )
  },
  bordered = TRUE,
  highlight = TRUE,
  defaultPageSize = 50,
  striped = TRUE
)

```
:::

### By Country
::: {.callout-note collapse="true"}
### View data
```{r reactable-country}
# First, create the grouped data for the main table
grouped_data <- df %>%
  select(Country, Instrument, Type) %>%
  unique()

# Create the reactable with nested tables
reactable(
  grouped_data,
  groupBy = c("Country", "Instrument"),
  columns = list(
    Country = colDef(width = 150),
    Instrument = colDef(width = 150),
    Type = colDef(width = 150)
  ),
  details = function(index) {
    # Get the detailed data for the selected row
    detail_data <- df %>%
      filter(
        Country == grouped_data$Country[index] &
          Instrument == grouped_data$Instrument[index] &
          Type == grouped_data$Type[index]
      ) %>%
      select(Question, Answer, Information)
    
    # Create the nested table
    htmltools::div(
      style = "padding: 1rem",
      reactable(
        detail_data,
        columns = list(
          Question = colDef(width = 200),
          Answer = colDef(width = 200),
          #Information = colDef(width = 300),
          Information = colDef(html = TRUE)
        ),
        outlined = TRUE,
        striped = TRUE,
        highlight = TRUE,
        defaultPageSize = 5
      )
    )
  },
  bordered = TRUE,
  highlight = TRUE,
  defaultPageSize = 50,
  striped = TRUE
)

```
:::



## Codebook

The database is structured according to a detailed list of items for each instrument. You can view the list of items and defintions in the box below or [download the codebook](https://raw.githubusercontent.com/moeckli-chair/moeckli-chair.github.io/main/data/summaryDefinition.csv){download="summaryDefinition.csv"} as a .csv file. 


::: {.callout-note collapse="true"}
## Items and Definitions
```{r}

def_table %>% 
  select(-ID) %>% 
  reactable(
    groupBy = c("Instrument"),
    columns = list(
      Instrument = colDef(width = 150),
      Item = colDef(width = 300),
      Definition = colDef(width = 500)),
    bordered = TRUE,
    highlight = TRUE,
    striped = TRUE)

```
:::


<!-- <button class="btn btn-primary" onclick="downloadCSV()"> -->
<!--   <i class="bi bi-download"></i> Download Codebook -->
<!-- </button> -->

<!-- <script> -->
<!-- async function downloadCSV() { -->
<!--   try { -->
<!--     // Fetch the CSV data -->
<!--     const response = await fetch('https://raw.githubusercontent.com/moeckli-chair/moeckli-chair.github.io/main/data/summaryDefinition.csv'); -->
<!--     const csvData = await response.text(); -->

<!--     // Create a Blob from the CSV data -->
<!--     const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' }); -->

<!--     // Create URL for the Blob -->
<!--     const url = URL.createObjectURL(blob); -->

<!--     // Create a temporary anchor element -->
<!--     const a = document.createElement('a'); -->
<!--     a.href = url; -->
<!--     a.download = 'summaryDefinition.csv'; -->
<!--     a.style.display = 'none'; -->

<!--     // Add to DOM, trigger click, then remove -->
<!--     document.body.appendChild(a); -->
<!--     a.click(); -->

<!--     // Clean up -->
<!--     setTimeout(() => { -->
<!--       document.body.removeChild(a); -->
<!--       URL.revokeObjectURL(url); -->
<!--     }, 100); -->
<!--   } catch (error) { -->
<!--     console.error('Download failed:', error); -->
<!--     alert('Download failed. Please try again later.'); -->
<!--   } -->
<!-- } -->
<!-- </script> -->


## Download dataset

<button class="btn btn-primary" onclick="downloadCSV()">
  <i class="bi bi-download"></i> Download .csv file
</button>

<script>
async function downloadCSV() {
  try {
    // Fetch the CSV data
    const response = await fetch('https://raw.githubusercontent.com/moeckli-chair/moeckli-chair.github.io/main/data/long.csv');
    const csvData = await response.text();
    
    // Create a Blob from the CSV data
    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });
    
    // Create URL for the Blob
    const url = URL.createObjectURL(blob);
    
    // Create a temporary anchor element
    const a = document.createElement('a');
    a.href = url;
    a.download = 'long.csv';
    a.style.display = 'none';
    
    // Add to DOM, trigger click, then remove
    document.body.appendChild(a);
    a.click();
    
    // Clean up
    setTimeout(() => {
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }, 100);
  } catch (error) {
    console.error('Download failed:', error);
    alert('Download failed. Please try again later.');
  }
}
</script>

## How to Cite
<button class="btn btn-primary" onclick="toggleCitation()">
  <i class="bi bi-quote"></i> How to Cite
</button>

<div id="citation-popup" style="display: none; margin-top: 15px; padding: 15px; background-color: #f8f9fa; border-radius: 5px; border: 1px solid #dee2e6;">
  <h4>Citation</h4>
  <p>Moeckli, Daniel. (Forthcoming) Add Title. <em>Add Journal</em>, 0(0).</p>
  
  <h4>BibTeX</h4>
  <div>
```bibtex
@article{moeckli_d_forthcoming,
  author = {Moeckli, Daniel},
  title = {Title},
  journal = {Add Journal},
  volume = {0},
  number = {0},
  year = {Forthcoming},
  doi = {},
}
```
  </div>
</div>

<script>
function toggleCitation() {
  const popup = document.getElementById('citation-popup');
  if (popup.style.display === 'none') {
    popup.style.display = 'block';
  } else {
    popup.style.display = 'none';
  }
}
</script>