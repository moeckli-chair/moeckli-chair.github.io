---
title: "LIDD institutions"
---

```{r setup-institutions}
library(tidyverse)
library(reactable)
library(here)

def_table <- read_csv(here("data/summaryDefinition.csv"))
long <- read_csv(here("data/long.csv"))

id_vec <- long %>% 
  filter(is.na(filterCountry)) %>% 
  distinct(ID) %>% 
  pull(ID)

df <- long %>%
  filter(!ID %in% id_vec) %>% 
  select(Country,Instrument,Type,Question,Answer,Sources,Comment)

df <- df %>%
  mutate(
    Information = case_when(
      !is.na(Sources) & !is.na(Comment) ~ paste0(
        "<strong>Source:</strong> ", Sources,
        "<br><strong>Comment:</strong> ", Comment
      ),
      !is.na(Sources) & is.na(Comment)  ~ paste0(
        "<strong>Source:</strong> ", Sources
      ),
      is.na(Sources) & !is.na(Comment)  ~ paste0(
        "<strong>Comment:</strong> ", Comment
      ),
      TRUE                              ~ NA_character_
    )
  ) %>%
  relocate(Information, .after = Answer) %>%
  select(-Sources, -Comment) %>% 
  drop_na(Answer)

```

Add LIDD INSTITUTIONS introduction here!

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. 

Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. 

## Typology and defintions

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. 

::: {.callout-note collapse="true"}
### View Typology

![](/images/liddConcept2.png){width="600px" fig-align="centre"}
:::

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.

::: {.callout-note collapse="true"}
### Defintions of Direct Democracy related instruments

```{r}
definitions_table <- tribble(
  ~Instrument, ~Definition,
  "Agenda Initiative",   "An instrument that allows a certain number of citizens to put an issue on the agenda of state organs but that does not lead to a referendum (i.e. a popular vote). An agenda initiave mandates the state organ to deal with the proposal: make a decision about it or at least debate it.",
  "Proactive citizens’ initiative",   "An instrument that allows a certain number of citizens to initiate a referendum and formulate the topic of the referendum.",
  "Rejective citizens’ initiative", "An instrument that allows a certain number of citizens to initiate a referendum that is aimed at preventing new laws (or parts of them) from being passed or at repealing existing laws (or parts of them).",
  "Law-initiated referendum", "A referendum that is triggered if certain conditions specified by law (i.e. the constitution or a legislative act) are met. The law may determine the topic (e.g. transfer of sovereignty) or the type of legal act (e.g. constitutional amendment) that triggers the referendum process. The law can either directly require the holding of a referendum or require it in case certain additional conditions are not met (e.g. a constitutional amendment is not passed by a supermajority in parliament). In all cases the referendum is triggered by law rather than initiated by a state organ.",
    "Legislature-initiated referendum", "A referendum that can be initiated by the legislature (i.e. parliament (or parts of it)). A referendum is initiated by the legislature if the parliament or members of the parliament can start the referendum process by defining the issue for the popular vote. The fact that another state organ may be responsible for calling the referendum (i.e. for making the final decision about it) does not matter. The deciding question is who starts the process.",
      "Executive-initiated referendum", "A referendum that can be initiated by the executive (i.e. the government (or parts of it)). A referendum is initiated by the executive if the government or other executive actors can start the referendum process by defining the issue for the popular vote. The fact that another state organ may be responsible for calling the referendum (i.e. for making the final decision about it) does not matter. The deciding question is who starts the process.",
       "Subnational-initiated referendum", "Subnational-initiated referendum A referendum that can be initiated by (a certain number of) subnational entities (regions, provinces, cantons; municipalities). A referendum is initiated by a subnational entity if it can start the referendum process by defining the issue for the popular vote.") 

definitions_table %>% 
  reactable(
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  pagination = FALSE,
  columns = list(
    `Instrument` = colDef(width = 150),
    Definition = colDef(width = 500, minWidth = 300)
  ),
  wrap = TRUE,
  resizable = TRUE
)

```
:::

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.

::: {.callout-note collapse="true"}
## Items and Definitions
```{r}

def_table %>% 
  select(-ID) %>% 
  reactable(
    groupBy = c("Instrument"),
    columns = list(
      Instrument = colDef(width = 150),
      Item = colDef(width = 300),
      Definition = colDef(width = 500)),
    bordered = TRUE,
    highlight = TRUE,
    striped = TRUE)


```
:::

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.

## Explore data

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.

::: {.callout-note collapse="true"}
### View data by institution

```{r reactable-institution}
# First, create the grouped data for the main table
grouped_data <- df %>%
  select(Instrument, Country, Type) %>%
  unique()

# Create the reactable with nested tables
reactable(
  grouped_data,
  groupBy = c("Instrument", "Country"),
  columns = list(
    Country = colDef(width = 150),
    Instrument = colDef(width = 150),
    Type = colDef(width = 150)
  ),
  details = function(index) {
    # Get the detailed data for the selected row
    detail_data <- df %>%
      filter(
        Instrument == grouped_data$Instrument[index] &
        Country == grouped_data$Country[index] &
          Type == grouped_data$Type[index]
      ) %>%
      select(Question, Answer, Information)
    
    # Create the nested table
    htmltools::div(
      style = "padding: 1rem",
      reactable(
        detail_data,
        columns = list(
          Question = colDef(width = 200),
          Answer = colDef(width = 200),
          #Information = colDef(width = 300),
          Information = colDef(html = TRUE)
        ),
        outlined = TRUE,
        striped = TRUE,
        highlight = TRUE,
        defaultPageSize = 5
      )
    )
  },
  bordered = TRUE,
  highlight = TRUE,
  defaultPageSize = 50,
  striped = TRUE
)

```
:::

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. 

::: {.callout-note collapse="true"}
### View data by country

```{r reactable-country}
# First, create the grouped data for the main table
grouped_data <- df %>%
  select(Country, Instrument, Type) %>%
  unique()

# Create the reactable with nested tables
reactable(
  grouped_data,
  groupBy = c("Country", "Instrument"),
  columns = list(
    Country = colDef(width = 150),
    Instrument = colDef(width = 150),
    Type = colDef(width = 150)
  ),
  details = function(index) {
    # Get the detailed data for the selected row
    detail_data <- df %>%
      filter(
        Country == grouped_data$Country[index] &
          Instrument == grouped_data$Instrument[index] &
          Type == grouped_data$Type[index]
      ) %>%
      select(Question, Answer, Information)
    
    # Create the nested table
    htmltools::div(
      style = "padding: 1rem",
      reactable(
        detail_data,
        columns = list(
          Question = colDef(width = 200),
          Answer = colDef(width = 200),
          #Information = colDef(width = 300),
          Information = colDef(html = TRUE)
        ),
        outlined = TRUE,
        striped = TRUE,
        highlight = TRUE,
        defaultPageSize = 5
      )
    )
  },
  bordered = TRUE,
  highlight = TRUE,
  defaultPageSize = 50,
  striped = TRUE
)

```
:::

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. 

## Codebook

Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. 

<button class="btn btn-primary" onclick="downloadCSV()">
  <i class="bi bi-download"></i> Download Codebook
</button>

<script>
async function downloadCSV() {
  try {
    // Fetch the CSV data
    const response = await fetch('https://raw.githubusercontent.com/moeckli-chair/moeckli-chair.github.io/main/data/summaryDefinition.csv');
    const csvData = await response.text();
    
    // Create a Blob from the CSV data
    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });
    
    // Create URL for the Blob
    const url = URL.createObjectURL(blob);
    
    // Create a temporary anchor element
    const a = document.createElement('a');
    a.href = url;
    a.download = 'summaryDefinition.csv';
    a.style.display = 'none';
    
    // Add to DOM, trigger click, then remove
    document.body.appendChild(a);
    a.click();
    
    // Clean up
    setTimeout(() => {
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }, 100);
  } catch (error) {
    console.error('Download failed:', error);
    alert('Download failed. Please try again later.');
  }
}
</script>


## Download dataset

Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. 

<button class="btn btn-primary" onclick="downloadCSV()">
  <i class="bi bi-download"></i> Download Data
</button>

<script>
async function downloadCSV() {
  try {
    // Fetch the CSV data
    const response = await fetch('https://raw.githubusercontent.com/moeckli-chair/moeckli-chair.github.io/main/data/long.csv');
    const csvData = await response.text();
    
    // Create a Blob from the CSV data
    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });
    
    // Create URL for the Blob
    const url = URL.createObjectURL(blob);
    
    // Create a temporary anchor element
    const a = document.createElement('a');
    a.href = url;
    a.download = 'long.csv';
    a.style.display = 'none';
    
    // Add to DOM, trigger click, then remove
    document.body.appendChild(a);
    a.click();
    
    // Clean up
    setTimeout(() => {
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }, 100);
  } catch (error) {
    console.error('Download failed:', error);
    alert('Download failed. Please try again later.');
  }
}
</script>
