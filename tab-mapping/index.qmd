---
title: "Initiatives"
html:
    include-in-header:
      - text: |
          <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
---

This webpage houses key data on citizens’ initiatives launched at the national level across the 46 member states of the Council of Europe from 1990 to 2020\. The data encompasses information on the types of initiatives, their admissibility, and the signature collection process, offering insights into the actual practice and outcomes of these democratic processes. The focus is on three types of instruments, the agenda initiative (AI), the proactive initiative (PI) and the rejective initiative (RI). For further information see the Conceptual framework section of this website.

```{r setup-maping}
library(tidyverse)
library(reactable)
library(here)
library(ggplot2)

df <- read_csv(here("data/raw_02.csv"))
outcome_data <- read_csv(here("data/outcome_data.csv"))

df <- df %>% 
  left_join(outcome_data, by = "Outcome")

unique_scenarios <- df %>% 
  distinct(Definition) %>% 
  pull()

outcome_data <- outcome_data %>% filter(Definition %in% unique_scenarios)

df <- df %>%
  select(Country,Type,Outcome,ID,Definition,Year,Title)

# First get the counts from the original df
outcome_counts <- df %>%
  group_by(Country, Type, Outcome) %>%
  summarise(count = n(), .groups = 'drop')

# Create the grouped data and join with counts
grouped_data <- df %>%
  select(Country, Type, Outcome) %>%
  unique() %>%
  left_join(outcome_counts, by = c("Country", "Type", "Outcome"))

```

## Distribution of bottom-up instruments
Slightly over 70 percent of the Council of Europe member states (33 out of 46) possess at least one form of bottom-up instrument of direct democracy, with some countries having multiple. The PI exists in 20 Council of Europe states, the RI in nine, the AI in 28.

## Mapping initiative practice

Out of the 57 bottom-up instruments that exist in the Council of Europe member states, 17 could not be included in our database. Some instruments could not be included due to the absence of implementation. For example, although the Greek constitution was amended to provide for an AI in 2019, the law required to implement this instrument has not been passed yet. Other instruments were not included because it was impossible to find any information (e.g. for the AI in Armenia), or we considered the information we identified to be unreliable (e.g. for the PI in Poland). Our database thus contains information on 40 instruments.

We applied an inclusion criterion that led to the removal of further eight instruments. Since our empirical goal is to map initiative practice in terms of trends and various outcomes, we excluded those instruments that have been used fewer than five times during the 31 years covered. Where citizens’ initiatives are launched so rarely, there is no meaningful practice to be analysed. This applied to the PI in Albania (n=1), Portugal (n=3), and Serbia (n=2); the RI in Albania (n=2), Luxembourg (n=1), and Malta (n=1); and the AI in Azerbaijan (n=1) and Liechtenstein (n=2). The [Supplemental Material](https://raw.githubusercontent.com/moeckli-chair/moeckli-chair.github.io/main/data/supplemental_material.pdf) provides full details on the instruments that did not satisfy the inclusion criteria as well as those that were included. It also provides details on the cases that were included despite only partial data being available. 

Overall, our database includes information on how 32 bottom-up instruments of direct democracy  have been used in practice, yielding a total of 6,874 citizens’ initiatives launched between 1990 and 2020\.

::: {.callout-note collapse="true"}
## Distribution of citizens’ initiatives
```{r table-code}
# Compute the count data
count_data <- df %>% 
  count(Type) %>%
  arrange(desc(n))

# JCO-like color palette
jco_colors <- c("#0073C2FF", "#EFC000FF", "#868686FF")

# Create the ggplot2 barplot
ggplot(count_data, aes(x = reorder(Type, -n), y = n, fill = Type)) +
  geom_bar(stat = "identity", width = 0.6, color = "white") +
  geom_text(aes(label = n), vjust = -0.5, size = 4) +
  scale_fill_manual(values = jco_colors, 
                    name = "Type of Citizens' Initiative") +
  labs(x = "", 
       y = "Count",
       title = "Distribution of Citizens' Initiatives",
       subtitle = "1990-2020"
       ) +
  theme_minimal() 


```
:::


## Outcomes of Citizens' Initiatives
Before a citizens’ initiative can be put to a referendum or, in the case of the AI, on the agenda of parliament, it normally needs to surmount two important hurdles. First, it needs to pass an admissibility test, that is, a test to determine whether it meets certain legal requirements to proceed. Second, it needs to collect sufficient signatures. The admissibility test can be conducted either before the collection of signatures, acting as a preliminary filter, or after signatures have been gathered, offering a later stage of scrutiny. Our database includes information on both these stages, resulting in various possible outcomes of the initiative process.

::: {.callout-note collapse="true"}
### Outcome variables and their definition
```{r}
reactable(
  outcome_data,
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  pagination = FALSE
)

```
:::


## Explore Data

Below, you can explore the data by country and by instrument.

### By Country
::: {.callout-note collapse="true"}
### View data
```{r}
### Data tables (grouped by country)
```{r mapping-country-table}
# Interactive Table with Row counts
reactable(
  grouped_data,
  groupBy = c("Country", "Type"),
  columns = list(
    Country = colDef(width = 150),
    Type = colDef(width = 150),
    Outcome = colDef(
      width = 200,
      cell = function(value, index) {
        sprintf("%s (%d)", value, grouped_data$count[index])
      }
    ),
    count = colDef(show = FALSE)
  ),
  details = function(index) {
    detail_data <- df %>%
      filter(
        Country == grouped_data$Country[index] &
          Type == grouped_data$Type[index] &
          Outcome == grouped_data$Outcome[index]
      ) %>%
      select(ID, Year, Definition, Title)
    
    htmltools::div(
      style = "padding: 1rem",
      reactable(
        detail_data,
        columns = list(
          ID = colDef(width = 100),
          Year = colDef(width = 100),
          Definition = colDef(width = 300),
          Title = colDef(width = 400)
        ),
        outlined = TRUE,
        striped = TRUE,
        highlight = TRUE,
        defaultPageSize = 50
      )
    )
  },
  bordered = TRUE,
  highlight = TRUE,
  defaultPageSize = 50,
  striped = TRUE
)

```
:::

### By Instrument
::: {.callout-note collapse="true"}
### View data
```{r mapping-type-table}
### Data tables (grouped by Type)
# First get the counts from the original df
outcome_counts <- df %>%
  group_by(Type, Country, Outcome) %>%
  summarise(count = n(), .groups = 'drop')

# Create the grouped data and join with counts
grouped_data <- df %>%
  select(Type, Country, Outcome) %>%
  unique() %>%
  left_join(outcome_counts, by = c("Type","Country","Outcome"))

# Interactive Table with Row counts
reactable(
  grouped_data,
  groupBy = c("Type", "Country"),
  columns = list(
    Type = colDef(width = 150),
    Country = colDef(width = 150),
    Outcome = colDef(
      width = 200,
      cell = function(value, index) {
        sprintf("%s (%d)", value, grouped_data$count[index])
      }
    ),
    count = colDef(show = FALSE)
  ),
  details = function(index) {
    detail_data <- df %>%
      filter(
          Type == grouped_data$Type[index] &
            Country == grouped_data$Country[index] &
            Outcome == grouped_data$Outcome[index]
      ) %>%
      select(ID, Year, Definition, Title)
    
    htmltools::div(
      style = "padding: 1rem",
      reactable(
        detail_data,
        columns = list(
          ID = colDef(width = 100),
          Year = colDef(width = 100),
          Definition = colDef(width = 300),
          Title = colDef(width = 400)
        ),
        outlined = TRUE,
        striped = TRUE,
        highlight = TRUE,
        defaultPageSize = 50
      )
    )
  },
  bordered = TRUE,
  highlight = TRUE,
  defaultPageSize = 50,
  striped = TRUE
)

```
:::

## Codebook

The codebook and further information on data collection is available by accessing the [Supplemental Material](https://raw.githubusercontent.com/moeckli-chair/moeckli-chair.github.io/main/data/supplemental_material.pdf) file.

<!-- <button class="btn btn-primary" onclick="downloadCSV()"> -->
<!--   <i class="bi bi-download"></i> Download Codebook -->
<!-- </button> -->

<!-- <script> -->
<!-- async function downloadCSV() { -->
<!--   try { -->
<!--     // Fetch the CSV data -->
<!--     const response = await fetch('https://raw.githubusercontent.com/moeckli-chair/moeckli-chair.github.io/main/data/raw_02.csv'); -->
<!--     const csvData = await response.text(); -->

<!--     // Create a Blob from the CSV data -->
<!--     const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' }); -->

<!--     // Create URL for the Blob -->
<!--     const url = URL.createObjectURL(blob); -->

<!--     // Create a temporary anchor element -->
<!--     const a = document.createElement('a'); -->
<!--     a.href = url; -->
<!--     a.download = 'raw_02.csv'; -->
<!--     a.style.display = 'none'; -->

<!--     // Add to DOM, trigger click, then remove -->
<!--     document.body.appendChild(a); -->
<!--     a.click(); -->

<!--     // Clean up -->
<!--     setTimeout(() => { -->
<!--       document.body.removeChild(a); -->
<!--       URL.revokeObjectURL(url); -->
<!--     }, 100); -->
<!--   } catch (error) { -->
<!--     console.error('Download failed:', error); -->
<!--     alert('Download failed. Please try again later.'); -->
<!--   } -->
<!-- } -->
<!-- </script> -->


## Download dataset

<button class="btn btn-primary" onclick="downloadCSV()">
  <i class="bi bi-download"></i> Download .csv file
</button>

<script>
async function downloadCSV() {
  try {
    // Fetch the CSV data
    const response = await fetch('https://raw.githubusercontent.com/moeckli-chair/moeckli-chair.github.io/main/data/raw_02.csv');
    const csvData = await response.text();
    
    // Create a Blob from the CSV data
    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });
    
    // Create URL for the Blob
    const url = URL.createObjectURL(blob);
    
    // Create a temporary anchor element
    const a = document.createElement('a');
    a.href = url;
    a.download = 'raw_02.csv';
    a.style.display = 'none';
    
    // Add to DOM, trigger click, then remove
    document.body.appendChild(a);
    a.click();
    
    // Clean up
    setTimeout(() => {
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }, 100);
  } catch (error) {
    console.error('Download failed:', error);
    alert('Download failed. Please try again later.');
  }
}
</script>

## How to Cite
<button class="btn btn-primary" onclick="toggleCitation()">
  <i class="bi bi-quote"></i> How to Cite
</button>

<div id="citation-popup" style="display: none; margin-top: 15px; padding: 15px; background-color: #f8f9fa; border-radius: 5px; border: 1px solid #dee2e6;">
  <h4>Citation</h4>
  <p>Daniel Moeckli, Fernando Mendez, Mara Labud, Nils Reimann, (2025) [Mapping the European Landscape of Citizens' Initiatives](https://doi.org/10.1177/00323217251334530), 73, Political Studies*/p>
  
  <h4>BibTeX</h4>
  <div>
```bibtex
@article{moeckli_mendez_forthcoming,
  author = {Moeckli, Daniel., Mendez, Fernando., Labud, Mara., and Reimann, Nils},
  title = {Mapping the European Landscape of Citizens’ Initiatives},
  journal = {Political Studies},
  volume = {73},
  number = {0},
  year = {2025},
  doi = {https://doi.org/10.1177/00323217251334530},
}
```
  </div>
</div>

<script>
function toggleCitation() {
  const popup = document.getElementById('citation-popup');
  if (popup.style.display === 'none') {
    popup.style.display = 'block';
  } else {
    popup.style.display = 'none';
  }
}
</script>
